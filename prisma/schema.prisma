// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prompt {
  id          Int               @id @default(autoincrement())
  description String            @unique
  gpt3Prefix  String?
  placeholder String
  outputLimit Int
  charLimit   Int
  history     QueryOutputPair[]
  createdAt   DateTime          @default(now())
}

model Subject {
  id            Int               @id @default(autoincrement())
  name          String            @unique
  subjectPrefix String
  history       QueryOutputPair[]
  createdAt     DateTime          @default(now())
}

model QueryOutputPair {
  id                Int      @id @default(autoincrement())
  subjectName       String
  subject           Subject  @relation(fields: [subjectName], references: [name], onDelete: Cascade)
  // subjectID     Int
  promptDescription String
  prompt            Prompt   @relation(fields: [promptDescription], references: [description])
  // promptID      Int    
  authorEmail       String
  author            User     @relation(fields: [authorEmail], references: [email])
  // authorId      String    
  query             String
  output            String
  tokens            Int
  createdAt         DateTime @default(now())
}

// Below is Next Auth configuration (boilerplate)

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String            @id @default(cuid())
  name                 String?
  email                String?           @unique
  emailVerified        DateTime?
  image                String?
  tokensUsed           Int?              @default(0)
  promptsUsed          Int?              @default(0)
  promptsQuota         Int?              @default(25)
  history              QueryOutputPair[]
  stripeCustomerId     String?           @unique
  stripeSubscriptionId String?           @unique
  cancelRequested      Boolean           @default(false)
  isActive             Boolean           @default(false)
  offWaitlist          Boolean           @default(false)
  accounts             Account[]
  sessions             Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
